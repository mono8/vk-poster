{"version":3,"sources":["components/Group/Group.module.sass","components/SendingForm/SendingForm.module.sass","components/Token/Token.module.sass","components/Groups/Groups.module.sass","utils/hooks.ts","consts.ts","utils/index.ts","store/groups/groupsSlice.ts","components/Group/Group.tsx","components/Groups/Groups.tsx","components/Message/Message.tsx","components/SendingForm/SendingForm.tsx","store/user/userSlice.ts","components/Token/Token.tsx","components/Account/Account.tsx","App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","API_VERSION","sleep","time","Promise","resolve","setTimeout","fetchGroups","createAsyncThunk","token","reject","jsonp","undefined","err","data","console","error","groups","response","items","map","group","checked","status","sendMessage","a","message","photoUrl","id","sendMessagesToAllGroups","getState","dispatch","state","checkedGroups","filter","user","createSlice","name","initialState","reducers","setGroups","action","payload","toggleGroup","find","checkAllGroups","uncheckAllGroups","setGroupStatus","resetAllGroupsStatuses","extraReducers","builder","addCase","fulfilled","rejected","actions","useStyles","makeStyles","theme","isChecked","backgroundColor","blue","success","green","red","Group","props","handleChange","classes","Paper","className","clsx","styles","wrapper","Checkbox","onChange","color","inputProps","groupName","onClick","href","screen_name","link","target","rel","image","src","photo_50","alt","root","margin","Groups","useState","shouldCheckAll","setShouldCheckAll","shouldShowResetButton","some","useEffect","length","Button","variant","textField","width","Message","TextField","label","multiline","minRows","maxRows","value","SendingForm","pending","setPending","localStorage","getItem","setMessage","setPhotoUrl","setItem","handleSubmit","event","preventDefault","form","e","photoInput","fullWidth","disabled","type","fetchName","first_name","last_name","userSlice","changeToken","changeName","Token","container","accessToken","URL","replace","searchParams","get","Account","App","Container","maxWidth","Boolean","window","location","hostname","match","store","configureStore","reducer","userReducer","groupsReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c990870.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Group_wrapper__17gz7\",\"link\":\"Group_link__Lsc18\",\"groupName\":\"Group_groupName__4g0ea\",\"image\":\"Group_image__2fvKh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoInput\":\"SendingForm_photoInput__2QH4b\",\"form\":\"SendingForm_form__1Jg2e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Token_container__3nGR6\",\"label\":\"Token_label__1_3FU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Groups_wrapper__1oPfr\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const API_VERSION = 5.103;\n","export function sleep(time: number) {\n    return new Promise((resolve) => setTimeout(resolve, time));\n}\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport jsonp from 'jsonp';\nimport { RootState } from '..';\nimport { API_VERSION } from '../../consts';\nimport { sleep } from '../../utils';\n\nexport type GroupType = {\n    photo_50: string;\n    can_post: 0 | 1;\n    checked: boolean;\n    id: number;\n    name: string;\n    type: 'page' | 'group';\n    screen_name: string;\n    status: 'failed' | 'success' | 'none';\n};\n\nexport type GroupsType = GroupType[];\n\nconst initialState: GroupsType = [];\n\nexport const fetchGroups = createAsyncThunk('groups/fetchGroups', (token: string) => {\n    return new Promise<GroupsType>((resolve, reject) => {\n        jsonp(\n            `https://api.vk.com/method/groups.get?fields=can_post&count&extended=1&access_token=${token}&v=${API_VERSION}`,\n            undefined,\n            (err, data) => {\n                if (err) {\n                    console.error(err);\n                    reject(err);\n                } else {\n                    const groups: GroupsType = data.response.items.map((group: GroupType) => ({\n                        ...group,\n                        checked: false,\n                        status: 'none',\n                    }));\n                    resolve(groups);\n                }\n            }\n        );\n    });\n});\n\nexport const sendMessage = createAsyncThunk(\n    'status/sendMessage',\n    async ({\n        group,\n        message,\n        photoUrl,\n        token,\n    }: {\n        group: GroupType;\n        message: string;\n        photoUrl: string;\n        token: string;\n    }) => {\n        return new Promise<GroupType['id']>((resolve, reject) => {\n            jsonp(\n                `https://api.vk.com/method/wall.post?owner_id=-${group.id}&message=${message}&attachments=${photoUrl}&access_token=${token}&v=${API_VERSION}`,\n                undefined,\n                (err, data) => {\n                    if (err) {\n                        console.error(`group ${group.id} ` + err.message);\n                        reject(group.id);\n                    } else {\n                        resolve(group.id);\n                    }\n                }\n            );\n        });\n    }\n);\n\nconst SLEEP_TIMEOUT = 500;\n\nexport const sendMessagesToAllGroups = createAsyncThunk(\n    'groups/sendMessagesToAllGroups',\n    async (\n        { message, photoUrl }: { message: string; photoUrl: string },\n        { getState, dispatch }\n    ) => {\n        const state = getState() as RootState;\n        const checkedGroups = state.groups.filter((group) => group.checked);\n        const token = state.user.token;\n\n        for (const group of checkedGroups) {\n            await dispatch(sendMessage({ group, message, photoUrl, token }));\n            await sleep(SLEEP_TIMEOUT);\n        }\n    }\n);\n\nexport const groups = createSlice({\n    name: 'groups',\n    initialState,\n    reducers: {\n        setGroups: (state, action: PayloadAction<GroupsType>) => {\n            return action.payload;\n        },\n        toggleGroup: (state, action: PayloadAction<GroupType['id']>) => {\n            const group = state.find((group) => group.id === action.payload);\n\n            if (group) {\n                group.checked = !group.checked;\n            }\n        },\n        checkAllGroups: (state) => {\n            return state.map((group) => ({ ...group, checked: true }));\n        },\n        uncheckAllGroups: (state) => {\n            return state.map((group) => ({ ...group, checked: false }));\n        },\n        setGroupStatus: (\n            state,\n            action: PayloadAction<{ id: GroupType['id']; status: GroupType['status'] }>\n        ) => {\n            const group = state.find((group) => group.id === action.payload.id);\n\n            if (group) {\n                group.status = action.payload.status;\n            }\n        },\n        resetAllGroupsStatuses: (state) => {\n            return state.map((group) => ({ ...group, status: 'none' }));\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchGroups.fulfilled, (state, action) => {\n                return action.payload;\n            })\n            .addCase(sendMessage.fulfilled, (state, action) => {\n                const group = state.find((group) => group.id === action.payload);\n                if (group) {\n                    group.status = 'success';\n                }\n            })\n            .addCase(sendMessage.rejected, (state, action) => {\n                const group = state.find((group) => group.id === action.payload);\n                if (group) {\n                    group.status = 'failed';\n                }\n            });\n    },\n});\n\nexport const { toggleGroup, checkAllGroups, uncheckAllGroups, setGroups, resetAllGroupsStatuses } =\n    groups.actions;\n\nexport default groups.reducer;\n","import React from 'react';\nimport { Checkbox, Paper, makeStyles } from '@material-ui/core';\n\nimport styles from './Group.module.sass';\nimport clsx from 'clsx';\nimport { useAppDispatch } from '../../utils/hooks';\nimport { GroupType, toggleGroup } from '../../store/groups/groupsSlice';\nimport { blue, green, red } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme) => ({\n    isChecked: {\n        backgroundColor: blue[100],\n    },\n    success: {\n        backgroundColor: green[200],\n    },\n    error: {\n        backgroundColor: red[300],\n    },\n}));\n\ntype PropsType = {\n    group: GroupType;\n};\n\nconst Group: React.FC<PropsType> = (props) => {\n    const { group } = props;\n\n    const dispatch = useAppDispatch();\n\n    const handleChange = () => {\n        dispatch(toggleGroup(group.id));\n    };\n    const classes = useStyles();\n\n    return (\n        <Paper\n            className={clsx(\n                styles.wrapper,\n                group.checked && classes.isChecked,\n                group.status === 'success' && classes.success,\n                group.status === 'failed' && classes.error\n            )}\n        >\n            <Checkbox\n                checked={group.checked}\n                onChange={handleChange}\n                color='primary'\n                inputProps={{\n                    'aria-label': 'secondary checkbox',\n                }}\n            />\n            <span className={styles.groupName} onClick={handleChange}>\n                {group.name}\n            </span>\n            <a\n                href={'https://vk.com/' + group.screen_name}\n                className={styles.link}\n                target='_blank'\n                rel='noreferrer'\n            >\n                <img className={styles.image} src={group.photo_50} alt={group.screen_name} />\n            </a>\n        </Paper>\n    );\n};\n\nexport default Group;\n","import React, { useState, useEffect } from 'react';\nimport { Button, makeStyles } from '@material-ui/core';\nimport { Group } from '../Group';\nimport styles from './Groups.module.sass';\nimport clsx from 'clsx';\nimport {\n    checkAllGroups,\n    fetchGroups,\n    GroupType,\n    resetAllGroupsStatuses,\n    uncheckAllGroups,\n} from '../../store/groups/groupsSlice';\nimport { useAppDispatch, useAppSelector } from '../../utils/hooks';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: '16px 16px 16px 0',\n    },\n}));\n\nconst Groups: React.FC = (props) => {\n    const [shouldCheckAll, setShouldCheckAll] = useState(true);\n\n    const handleClick = () => {\n        if (shouldCheckAll) {\n            dispatch(checkAllGroups());\n        } else {\n            dispatch(uncheckAllGroups());\n        }\n\n        setShouldCheckAll(!shouldCheckAll);\n    };\n\n    const classes = useStyles();\n\n    const token = useAppSelector((state) => state.user.token);\n    const dispatch = useAppDispatch();\n    const groups = useAppSelector((state) => state.groups);\n\n    const shouldShowResetButton = useAppSelector((state) =>\n        state.groups.some((group) => group.status === 'failed' || group.status === 'success')\n    );\n\n    useEffect(() => {\n        if (token) {\n            dispatch(fetchGroups(token));\n        }\n    }, [token, dispatch]);\n\n    const handleReset = () => {\n        dispatch(resetAllGroupsStatuses());\n    };\n\n    return groups.length ? (\n        <>\n            <Button variant='contained' onClick={handleClick} className={classes.root}>\n                Поставить/убрать все галки\n            </Button>\n\n            {shouldShowResetButton && (\n                <Button variant='contained' onClick={handleReset} className={clsx(classes.root)}>\n                    Сбросить статусы отправки\n                </Button>\n            )}\n\n            <div className={styles.wrapper}>\n                {groups.map((group: GroupType) => (\n                    <Group key={group.id} group={group} />\n                ))}\n            </div>\n        </>\n    ) : null;\n};\n\nexport default Groups;\n","import React from 'react';\nimport { TextField, makeStyles } from '@material-ui/core';\n\ntype PropsType = {\n    message: string;\n    onChange(e: any): void;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    textField: {\n        width: 400,\n    },\n}));\n\nconst Message: React.FC<PropsType> = (props) => {\n    const { message, onChange } = props;\n    const classes = useStyles();\n    return (\n        <TextField\n            label='Шапка'\n            multiline\n            minRows={10}\n            maxRows={40}\n            className={classes.textField}\n            margin='normal'\n            variant='outlined'\n            value={message}\n            onChange={onChange}\n        />\n    );\n};\n\nexport default Message;\n","import React, { useState, useEffect } from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport styles from './SendingForm.module.sass';\nimport { Message } from '../Message';\nimport { useAppDispatch } from '../../utils/hooks';\nimport { sendMessagesToAllGroups } from '../../store/groups/groupsSlice';\n\nconst SendingForm: React.FC = (props) => {\n    const [pending, setPending] = useState(false);\n    const [message, setMessage] = useState(localStorage.getItem('message') || '');\n    const [photoUrl, setPhotoUrl] = useState(localStorage.getItem('photo') || '');\n\n    const dispatch = useAppDispatch();\n\n    const handleMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setMessage(e.target.value);\n    };\n\n    const handlePhotoUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPhotoUrl(e.target.value);\n    };\n\n    useEffect(() => {\n        localStorage.setItem('message', message);\n    }, [message]);\n\n    useEffect(() => {\n        localStorage.setItem('photo', photoUrl);\n    }, [photoUrl]);\n\n    const handleSubmit = async (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n\n        if (message) {\n            setPending(true);\n            await dispatch(sendMessagesToAllGroups({ message, photoUrl }));\n            setPending(false);\n        }\n    };\n\n    return (\n        <form className={styles.form}>\n            <Message message={message} onChange={handleMessageChange} />\n            <div className={styles.photoInput}>\n                <TextField\n                    fullWidth\n                    label='Фото'\n                    variant='outlined'\n                    value={photoUrl}\n                    onChange={handlePhotoUrlChange}\n                />\n            </div>\n            <Button\n                variant='contained'\n                disabled={pending || !message}\n                onClick={handleSubmit}\n                type='submit'\n            >\n                {pending ? 'Идет отправка...' : 'Разослать'}\n            </Button>\n        </form>\n    );\n};\n\nexport default SendingForm;\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport jsonp from 'jsonp';\nimport { API_VERSION } from '../../consts';\n\nexport interface User {\n    token: string;\n    name: string;\n}\n\nconst initialState: User = { token: '', name: '' };\n\nexport const fetchName = createAsyncThunk('user/fetchName', async (token: string) => {\n    return new Promise<string>((resolve, reject) => {\n        jsonp(\n            `https://api.vk.com/method/account.getProfileInfo?&access_token=${token}&v=${API_VERSION}`,\n            undefined,\n            (err, data) => {\n                if (err) {\n                    console.error(err);\n                    reject(err);\n                } else {\n                    resolve(`${data.response.first_name} ${data.response.last_name}`);\n                }\n            }\n        );\n    });\n});\n\nexport const userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        changeToken: (state, action: PayloadAction<string>) => {\n            state.token = action.payload;\n        },\n        changeName: (state, action: PayloadAction<string>) => {\n            state.name = action.payload;\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchName.fulfilled, (state, action) => {\n            state.name = action.payload;\n        });\n    },\n});\n\nexport const { changeToken, changeName } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport styles from './Token.module.sass';\nimport { API_VERSION } from '../../consts';\nimport { changeToken } from '../../store/user/userSlice';\nimport { useAppDispatch, useAppSelector } from '../../utils/hooks';\n\nconst Token: React.FC = () => {\n    const token = useAppSelector((state) => state.user.token);\n\n    const dispatch = useAppDispatch();\n\n    const getToken = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.value) return;\n\n        try {\n            const url = new URL(event.target.value.replace('#', '?'));\n            const accessToken = url.searchParams.get('access_token');\n            if (accessToken) dispatch(changeToken(accessToken));\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    return (\n        <div className={styles.container}>\n            <a\n                href={`https://oauth.vk.com/authorize?client_id=7218002&redirect_uri=https://oauth.vk.com/blank.html&display=popup&scope=wall,offline,groups&response_type=token&v=${API_VERSION}`}\n                className={styles.label}\n            >\n                Получить токен\n            </a>\n            <TextField\n                id='input-token'\n                label='Токен'\n                variant='outlined'\n                onChange={getToken}\n                value={token}\n            ></TextField>\n        </div>\n    );\n};\n\nexport default Token;\n","import React, { useEffect } from 'react';\nimport { Token } from '../Token';\nimport { fetchName } from '../../store/user/userSlice';\nimport { useAppDispatch, useAppSelector } from '../../utils/hooks';\n\nconst Account: React.FC = (props) => {\n    const dispatch = useAppDispatch();\n\n    const token = useAppSelector((state) => state.user.token);\n    const name = useAppSelector((state) => state.user.name);\n\n    useEffect(() => {\n        if (token) {\n            dispatch(fetchName(token));\n        }\n    }, [token, dispatch]);\n\n    const hasToken = name && token;\n\n    return hasToken ? (\n        <div>\n            <h1>Аккаунт</h1>\n            <div>{name}</div>\n        </div>\n    ) : (\n        <Token />\n    );\n};\n\nexport default Account;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport { Groups } from './components/Groups';\nimport { SendingForm } from './components/SendingForm';\nimport { Account } from './components/Account';\n\nconst App: React.FC = () => {\n    return (\n        <Container maxWidth='xl'>\n            <Account />\n            <SendingForm />\n            <Groups />\n        </Container>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './user/userSlice';\nimport groupsReducer from './groups/groupsSlice';\n\nexport const store = configureStore({\n    reducer: { user: userReducer, groups: groupsReducer },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}